<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tony Blog]]></title>
  <link href="http://tonysup.github.com/atom.xml" rel="self"/>
  <link href="http://tonysup.github.com/"/>
  <updated>2013-08-04T16:45:23+08:00</updated>
  <id>http://tonysup.github.com/</id>
  <author>
    <name><![CDATA[Tony]]></name>
    <email><![CDATA[peng2251@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[回来了]]></title>
    <link href="http://tonysup.github.com/blog/2013/08/04/come-back/"/>
    <updated>2013-08-04T16:07:00+08:00</updated>
    <id>http://tonysup.github.com/blog/2013/08/04/come-back</id>
    <content type="html"><![CDATA[<p>买房终于告一段落，从开始看二手房，到最后定下期房，前后两个月多，虽然现在贷款还没批下来。学车也告一段落，等天不热或者来年春天再学吧，反正也不急，现在项目就挺忙的，平时周末也懒的去学。
<p>开始安心补充基础。目前重点是工作中把用到的技能，整扎实；工作之外把大学那些基础课程补下下吧，尽可能的找一些英文的材料补习。
<p>工作中重点几个方便:(1)表达式 (2)请求队列 (3)参数内存 (4)简单内存数据库 有空尽可能的自己实现下。
<p>工作之外的话，先看下SICP和算法基础吧。线性代数看时间吧，有时间的话补补，这块需要的时间也挺多。

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[看完房子之后]]></title>
    <link href="http://tonysup.github.com/blog/2013/05/05/afterseehouse/"/>
    <updated>2013-05-05T21:44:00+08:00</updated>
    <id>http://tonysup.github.com/blog/2013/05/05/afterseehouse</id>
    <content type="html"><![CDATA[<p>今天立夏，天气特别的热。早上以为今个天特好，本打算去南部山区转转，实在太热，然后又有别的事，所以到那后吃了根冰棍就闪回去了。</p>


<p>下午看了看房子从网上，约了几个去看了下。房子很好，价格还算可以，简装修的，就是房产证上的面积少了一小点，没法落户，以后孩子上学是个问题，暂时不考虑了。这算是正了八经的第一次去看房子，两个感叹，一是这帮当地的，拆迁户太high了，一家有的都有四五套房子，根本不差钱。二是钱到用时方恨少。除了房子以外，还得交这钱那钱的，算算也得好几万。哎。。。</p>


<p>有个人一起后，做事的动力，思路就多了。原来一个人，有时候可以得过且过。晚上跟老妈打电话，深感做父母的太辛苦了。自己得加快奋斗的脚步。今年还有两个任务，一是买房，二是寻找别的赚钱的途径。</p>


<p>这周就工作了两天，技术问题不写了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[写在五一前]]></title>
    <link href="http://tonysup.github.com/blog/2013/04/28/5-dot-1/"/>
    <updated>2013-04-28T23:51:00+08:00</updated>
    <id>http://tonysup.github.com/blog/2013/04/28/5-dot-1</id>
    <content type="html"><![CDATA[<p>终于可以休息几天了，一直以来忙碌的项目，身心疲惫。不过这几天的安排也挺紧凑的，各种早起。先回家看看，然后再换个地方转转，这三天就这样。</p>


<p>最近主要思考了以下几个方面：(1）各种业务，处理的大致流程是什么。(2）系统的整体框架是什么，模块的划分和组合。(3)该模块内的核心业务，核心数据结构.（4）系统出彩部分的源代码学习和感悟。</p>


<p>今天看了下一个boost库的lock_guard其实这个也是用了一个包装，用类的构造和析构函数包含加锁和释放锁的操作。</p>


<p>平时多考虑下这些问题的实现，动手写程序。合适的情况下，尽量使用模板。大过节的，就写这么多了</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[内存]]></title>
    <link href="http://tonysup.github.com/blog/2013/04/21/memory/"/>
    <updated>2013-04-21T22:06:00+08:00</updated>
    <id>http://tonysup.github.com/blog/2013/04/21/memory</id>
    <content type="html"><![CDATA[<p>  <p>沉下心来，才能有所收获。
  <p>这周的心得。
  <p>首先，平时使用boost库时，多揣摩下实现原理，想想如果自己实现这种功能的时候，能不能做的出来，实现的方式跟标准库有啥区别。前几天重点看了下lexcial_cast,boost::any的源码。lexical_cast主要是封装stringstream。boost::any既要保存任何类型的值，又要保存类型的信息，并且还不能是模块类。这就需要一个内部变量，保存该值和类型信息，封装placeholder的派生类保存这些信息。有篇文档，专门讨论这种封装的技能。以后要多思考这些类库的封装原理，包括stl的各种容器，算法啥的。有机会试着用模板封装下业务，体会其类型参数化，偏特化的作用。
  <p>看了下《oracle 9i&amp;10g编程艺术》，其实这本书08年就买了，肯定全部看完过。不过跟当时刚毕业那会感觉不大一样，原来有些原理技能。当时感觉挺懂，是那么回事。其实现在看看，原来的那些理解是多么的空，多么的“high level”。现在沉下心来看了看前面的配置和数据库提交这块，就很有收获。一是一些细节的环境变量，其实工作这么多年以来真的都没怎么用过，不过很有用。二是，一些作者的实用型工具存储过程，函数啥的，设计的是如此的精妙。自己平时工作中应该试着去写一些实用性工具之类的东西。
  <p>那天好奇的看了看共享内存模式下的数据的存储，具体的代码没细看，大意应该就是。开辟一片大容量的共享内存，计算好索引及一些头信息，数据的大小，线性的存入内存。其中索引的地方再根据avl算法查找下下标。想想这就是简单的内存数据库啊。只不过根据特定的业务，简化了很多东西，加入了一些特殊的限制。然后又很好奇的搜索了下，很多zhuanli都是跟共享内存有关，内存内存，还是内存。突然有了把内存玩到&#8221;极致&#8221;的感觉，就跟打dota时把某个英雄玩的很飘逸，风骚一样。这帮老大早在2k年就玩的这么好了。
  <p>想了想，应该沉下心来加强下了。总体路线就是业务+技能，无论从广度还是深度上。然后工作之余，玩完ios开发吧。这mac本不能浪费了。恩，就这样。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[consistency]]></title>
    <link href="http://tonysup.github.com/blog/2013/04/14/consistency/"/>
    <updated>2013-04-14T22:46:00+08:00</updated>
    <id>http://tonysup.github.com/blog/2013/04/14/consistency</id>
    <content type="html"><![CDATA[<p>   <p>一致性。在涉及到多个模块协调做业务时，系统为保持业务的完整性，需要一种机制，保证业务提交时各部分的一致性。这个业务，要么各部分全都提交成功，要么都没提交成功，没做。</p><p>一种解决办法就是，以模块为例子。一个主模块，或者叫发起模块。记录一个标记，然后依次调用其他模块，如果其他模块都成功，则删除该标记，表示该业务的完整成功;如果调用其他模块中>有失败的，则根据该标记rollback成功的模块，如果rollback成功，修改主模块标记，否则标记下为rollback失败。在辅模块中也有相应的标记或者记录，标记该模块是否成功，如果rollback成功时，则删除或者打rollback成功标记。</p>
   <p>这种做法，较合理的解决了这类问题。不知中间件连接多数据库提交是怎么保持的事物时怎么控制的大事物。还有两端锁提交协议。这些后续有空补充下。</p> <br/>
   <p>PS.今天有个想法就是，业务类型(IB)的接口,什么样的处理流程或者叫框架才能更灵活，把抽象写进代码，把业务写进配置，一直没有什么好的思路处理这类问题。导致有时候这些业务代码写的时间长了就挺枯燥。以后尽量没几天或者几周写篇记录下，以后翻阅的时候可以看写成长的轨迹。现在想想，其实应该早开始写的。</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[from now on]]></title>
    <link href="http://tonysup.github.com/blog/2013/04/04/from-now-on/"/>
    <updated>2013-04-04T23:32:00+08:00</updated>
    <id>http://tonysup.github.com/blog/2013/04/04/from-now-on</id>
    <content type="html"><![CDATA[<p>   工作有三四年时间，不过回头想想，在技术上进展不算太大，很多东西没成体系，也比较杂。感觉该抽点时间理理思路，总结记录下平时的所见，所闻，所想。这个地方挺简洁，方便码字。</p>

<p>   人的性格或者思维方式，或者年轻，或者没毕业时已经成型。年前大学同学聚会，由于有一年半时间在外，舍友结婚也没机会去。对我来说这是毕业后第一次聚会，见了不少同学，感觉大家似乎都没太大变化。有些同学的思维方式还是那样。其实，有时间想想自己，也没太多变化。</p>

<p>   以后坚持写博客，每周去知乎和stackOverflow回答或者提问几个问题，强迫自己思考问题。工作时间也挺长，业务型的项目，时间长了不利于技术上的长进。有空多看下开源的代码或者自己想着做些有意思的东西，不要局限于现在的技术，开阔下思路。</p>

<p>   第一篇先写这些。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[justHello]]></title>
    <link href="http://tonysup.github.com/blog/2013/04/04/justhello/"/>
    <updated>2013-04-04T18:14:00+08:00</updated>
    <id>http://tonysup.github.com/blog/2013/04/04/justhello</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
